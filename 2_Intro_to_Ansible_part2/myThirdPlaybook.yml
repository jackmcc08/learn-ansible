---

- name: My third playbook
  hosts: test_group
  gather_facts: true
  vars:
    vm_one: "myVM-1"
    vm_two: "myVM-2"
  tasks:
    # This task demonstrates some of the facts that are gathered 
    # ansible_facts
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_vars_facts.html
    # - name: Print ansible_facts
    #   ansible.builtin.debug:
    #     var: ansible_facts

    - name: Print key system details from each VMs using ansible_facts
      ansible.builtin.debug:
        msg:
        - "This VM user is: {{ ansible_facts['user_id'] }}"
        - "This VM's IP is: {{ ansible_host }}"
        - "This VM's hostname is: {{ ansible_hostname }}"
        - "This VM's linux distribution is: {{ansible_facts['distribution'] }}"

    # Use of magic variables
    # Use of loops
    # Use of Hostvars
    # This means you can use information from one target host on another target host
    - name: Access cached facts of all systems in the target group using Hostvars
      ansible.builtin.debug:
        msg:
        - "The VM {{ hostvars[item]['ansible_facts']['hostname'] }} ip address is: {{ hostvars[item]['ansible_host'] }}"
      loop: "{{ ansible_play_hosts }}"


    # Another demonstration of looping - it has to be a loop!
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html 
    - name: Loop through a list of items and see the task be run multiple times on each host
      ansible.builtin.debug:
        var: looped_item
      loop: 
      - "1. Programming isn't about what you know. It's about what you can figure out. - Chris Pine"
      - "2. Every great developer you know got there by solving problems they were unqualified to solve until they actually did it. - Patrick Mckenzie"
      - "3. It's ok to want to yeet your laptop out the window every now and then. For me it happens at least twice a day. - Jack McCarthy"
      loop_control:
        loop_var: looped_item

    # Demonstrates conditionals
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html
    - name: Only execute an action on one target host with the When keyword
      ansible.builtin.debug:
        msg: "I was only printed on {{ ansible_hostname }}"
      when: 
      - ansible_hostname == vm_one


    # Demonstrates using tags
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tags.html
    # With this command you will see only the tagged task is run
    # ansible-playbook -i inventory.yml myThirdPlaybook.yml --tags "print_me"
    # With this command you will see that the tagged task is skipped
    # ansible-playbook -i inventory.yml myThirdPlaybook.yml --skip-tags "print_me"
    # There are also special tags always, never, all, tagged, untagged which have special effects when using tags
    - name: Use tags to control which tasks are run
      ansible.builtin.debug:
        msg: "I have the tag - print_me"
      when: 
      - ansible_hostname == vm_one
      tags: 
      - print_me


    # Demonstrates using filters
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html
    # These let you manipulate data 
    # There are Ansible specific filters, built in filters from Jinja2, python methods and also create custom filters
    # Note Ansible is not really meant for data manipulation, so if your data needs complex manipulation it might be better to use a custom filter 
    # Also be aware of templating, a very useful tool. 
    # Remember it happens on the Control Node
    - name: Use filters to control data
      ansible.builtin.debug: 
        msg:
        - "This is my unsorted list: [8,2,3,1]"
        - "This is my sorted list: {{ [8,2,3,1] | sort }}"
        - "This is using a default value if a variable isn't defined: {{ some_variable | default('details!') }}"
      when: 
      - ansible_hostname == vm_one


    # Demonstrates reusing tasks with include_tasks and import_tasks
    # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse.html#playbooks-reuse
    # With Ansible you can reuse a variety of artificats, including tasks, playbooks, vars, roles, etc...
    # Its important to remember there is dynamic and static reusing which has different impacts on the way it reusing
    # Use include_tasks to dynamically run a list of tasks which importantly is affected by previous tasks (e.g. you can use variables generated by previous tasks), this also allows you to loop the reused tasks
    # Use import_tasks to statically include a list of tasks and these are defined before any other tasks are run. 
    - name: Getting the date to demonstrate dynamic inclusion of tasks
      ansible.builtin.shell: date
      register: vm_date
      when: 
        - ansible_hostname == vm_one

    - name: Dynamically including this task
      ansible.builtin.include_tasks: reusable_tasks.yml
      vars:
        type_reuse: "Dynamic"
        test_var: "{{ vm_date.stdout }}"
      when: 
        - ansible_hostname == vm_one

    - name: Statically including this task
      ansible.builtin.import_tasks: reusable_tasks.yml
      vars:
        type_reuse: "Static"
        test_var: "{{ vm_date.stdout }}"
      when: 
        - ansible_hostname == vm_one

    # This demonstrates using Ansible Vault to protect secrets
    # https://docs.ansible.com/ansible/latest/vault_guide/index.html
    # This is going to show a simple way to encrypt a file with a password
    # Create a variable file called encrypted_secrets.yml
    # Put one secret in it called secret_var and give it a value
    # Encrypt the file with `ansible-vault encrypt encrypted_secrets.yml`, it will prompt you for a password
    # Import the variable file - note here I have used include_vars but there are many ways to import variables from Files
    # Run the playbook with this new task - ansible-playbook -i inventory.yml myThirdPlaybook.yml --ask-vault-pass
    # You can also use a certificate to unlock the vault, or provide the password via a security tool
    # You can also use a script to unlock the vault, this could be used to store secrets for example in a key-vault, see an example:
    # ansible-playbook -i inventory.yml --vault-id dev@print-password-client.py myThirdPlaybook.yml 
    - name: Imports variables from the encrypted file
      ansible.builtin.include_vars:
        file: encrypted_secrets.yml
      when: 
        - ansible_hostname == vm_one
    
    - name: Using Ansible Vault to secure variables
      ansible.builtin.debug:
        msg:
        - "This variable was encrypted: {{ secret_var }}"
      when: 
        - ansible_hostname == vm_one

    


